Since each file is treated as a separate module, In each module, the module free variable is a reference to the object representing the current module
where there are stored informations for the module of that file.


== Module caching caveats#

Modules are cached based on their resolved filename. 
Since modules may resolve to a different filename based on 
the location of the calling module 
(loading from node_modules folders), it is not a guarantee 
that require('foo') will always return the exact same object,
if it would resolve to different files.

== Loading from node_modules folders#
If the module identifier passed to require() is not a core module, and does not begin with '/', '../', or './', then Node.js starts at the directory of the current module, and adds /node_modules, and attempts to load the module from that location. Node.js will not append node_modules to a path already ending in node_modules.

If it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.

For example, if the file at '/home/ry/projects/foo.js' called require('bar.js'), then Node.js would look in the following locations, in this order:

/home/ry/projects/node_modules/bar.js
/home/ry/node_modules/bar.js
/home/node_modules/bar.js
/node_modules/bar.js
This allows programs to localize their dependencies, so that they do not clash.
It is possible to require specific files or sub modules distributed with a module by including a path suffix after the module name. For instance require('example-module/path/to/file') would resolve path/to/file relative to where example-module is located. The suffixed path follows the same module resolution semantics.